top_srcdir=@top_srcdir@
srcdir=@srcdir@
VPATH=$(srcdir)
top_builddir=@top_builddir@

PROG=bzip2

include ../../Makefile.wf
include $(top_builddir)/util/Makefile.use_us

$(PROG): $(SCHEDULER_GOALS)

MYFLAGS = -I$(top_srcdir)/scheduler -I$(top_srcdir) -I$(top_builddir)/util 
SCHEDULERS_DIR = $(top_srcdir)/scheduler

# ------------------------------------------------------------------
# This file is part of bzip2/libbzip2, a program and library for
# lossless, block-sorting data compression.
#
# bzip2/libbzip2 version 1.0.5 of 10 December 2007
# Copyright (C) 1996-2007 Julian Seward <jseward@bzip.org>
#
# Please read the WARNING, DISCLAIMER and PATENTS sections in the 
# README file.
#
# This program is released under the terms of the license contained
# in the file LICENSE.
# ------------------------------------------------------------------

SHELL=/bin/sh

# To assist in cross-compiling
CC=@CC@
AR=ar
RANLIB=ranlib
LDFLAGS=
CILKDIR=/usr/local/cilk
#CILKLIB=-L$(CILKDIR)/lib64
# CILKCILK may be a C compiler, C++, or Cilk++.  Use a Cilk++ compiler
# if CILKFLAG is set.  If CILKCILK is cilk++ (not c/c++) then CILKCXX
# should be the g++ compiler corresponding to cilk++.
#CILKCXX=$(CILKDIR)/bin/g++
#CILKCILK=$(CILKDIR)/bin/cilk++
#CILKCXX=g++-mp-4.5 -std=c++0x 
#CILKCILK=g++-mp-4.5 -std=c++0x 
CILKCXX=@CXX@ -std=c++0x 
CILKCILK=$(CXX) -std=c++0x 

ifdef APPLE  # Define this on Darwin
#CILKLINK=-lcilkrts
CILKLINK=$(SCHEDULERS_DIR)/libschedulers.a 
else
#CILKLINK=-Wl,-Bstatic -lcilkrts -Wl,-Bdynamic -lpthread
#CILKLINK=-Wl,-Bstatic $(SCHEDULERS_DIR)/libschedulers.a -Wl,-Bdynamic -lpthread
CILKLINK=$(SCHEDULERS_DIR)/libschedulers.a -lpthread
endif

BIGFILES=-D_FILE_OFFSET_BITS=64
#CILKFLAG=-DBZLIB_CILK
CILKFLAG=-DBZLIB_WFO -I$(SCHEDULERS_DIR)
#OPTDBG=-O2 -m64 -fno-omit-frame-pointer -g
OPTDBG=-O4 -m64 -fno-omit-frame-pointer -g $(OPT)
CFLAGS+=-Wall -Winline $(OPTDBG) $(BIGFILES) $(CILKFLAG) $(MYFLAGS)

OSUFFIX=.o
ESUFFIX=

# Sample make variables for non-Cilk build of Cilk code
#CC=cc -xstrconst
#CILKDIR=/not
#CILKCXX=CC
#CILKCILK=CC
#CILKLINK=
#CFLAGS=-xO3 -xarch=v9a $(BIGFILES) $(CILKFLAG)

# Sample make variables for Windows build of Cilk code
#CC=cl
#CILKDIR=
#CILKCXX=cilkpp /TK
#CILKCILK=cilkpp /TK
#CILKLINK=
#CFLAGS=/nologo /W2 $(OPTDBG) $(BIGFILES) $(CILKFLAG)
#OSUFFIX=.obj
#ESUFFIX=.exe

# Where you want it installed when you do 'make install'
PREFIX=/usr/local


OBJS= blocksort$(OSUFFIX)  \
      huffman$(OSUFFIX)    \
      crctable$(OSUFFIX)   \
      randtable$(OSUFFIX)  \
      compress$(OSUFFIX)   \
      decompress$(OSUFFIX) \
      bzlib$(OSUFFIX)

all: libbz2.a bzip2 bzip2recover test

bzip2-dynamic: libbz2.a bzip2$(OSUFFIX)
	$(CILKCILK) $(CFLAGS) $(LDFLAGS) -o bzip2-dynamic bzip2$(OSUFFIX) libbz2.a

bzip2-cilkstatic: libbz2.a bzip2$(OSUFFIX)
	$(CILKCXX) $(CFLAGS) $(LDFLAGS) -o bzip2-cilkstatic bzip2$(OSUFFIX) libbz2.a $(CILKLIB) $(CILKLINK)

bzip2-windows$(ESUFFIX): bzip2$(OSUFFIX) $(OBJS)
	$(CILKCILK) $(CFLAGS) $(LDFLAGS) /Febzip2-windows$(ESUFFIX) bzip2$(OSUFFIX) $(OBJS)

bzip2: bzip2-cilkstatic
	ln -f bzip2-cilkstatic bzip2

bzip2recover: bzip2recover$(OSUFFIX)
	$(CC) $(CFLAGS) $(LDFLAGS) -o bzip2recover bzip2recover$(OSUFFIX)

libbz2.a: $(OBJS)
	rm -f libbz2.a
	$(AR) cq libbz2.a $(OBJS)
	@if ( test -f $(RANLIB) -o -f /usr/bin/ranlib -o \
		-f /bin/ranlib -o -f /usr/ccs/bin/ranlib ) ; then \
		echo $(RANLIB) libbz2.a ; \
		$(RANLIB) libbz2.a ; \
	fi

check: test cilktest
test: bzip2
	@cat $(srcdir)/words1
	./bzip2 -1  < sample1.ref > sample1.rb2
	./bzip2 -2  < sample2.ref > sample2.rb2
	./bzip2 -3  < sample3.ref > sample3.rb2
	./bzip2 -d  < sample1.bz2 > sample1.tst
	./bzip2 -d  < sample2.bz2 > sample2.tst
	./bzip2 -ds < sample3.bz2 > sample3.tst
	./bzip2 -1W < cilktest1 | ./bzip2 -dc > cilktest1.tst
	cmp sample1.bz2 sample1.rb2 
	cmp sample2.bz2 sample2.rb2
	cmp sample3.bz2 sample3.rb2
	cmp sample1.tst sample1.ref
	cmp sample2.tst sample2.ref
	cmp sample3.tst sample3.ref
	cmp cilktest1 cilktest1.tst
	./bzip2 -W1 < compress.c | ./bzip2 -dc | cmp - compress.c
	./bzip2 -W1 < bzip2 | ./bzip2 -dc | cmp - bzip2
	@cat $(srcdir)/words3

cilktest: bzip2 mkruns
	@echo "Compressing random runs in parallel"
	set -e ; ./mkruns > "/tmp/cmp.$$$$" ; ./bzip2 -1W < "/tmp/cmp.$$$$" | bzip2 -dc | cmp "/tmp/cmp.$$$$" - ; rm "/tmp/cmp.$$$$"
	@echo "Compressing the first 200 files under . in parallel"
	find . -type f | grep -v ' ' | head -200 | ./cmpcmp

install: bzip2 bzip2recover
	if ( test ! -d $(PREFIX)/bin ) ; then mkdir -p $(PREFIX)/bin ; fi
	if ( test ! -d $(PREFIX)/lib ) ; then mkdir -p $(PREFIX)/lib ; fi
	if ( test ! -d $(PREFIX)/man ) ; then mkdir -p $(PREFIX)/man ; fi
	if ( test ! -d $(PREFIX)/man/man1 ) ; then mkdir -p $(PREFIX)/man/man1 ; fi
	if ( test ! -d $(PREFIX)/include ) ; then mkdir -p $(PREFIX)/include ; fi
	cp -f bzip2 $(PREFIX)/bin/bzip2
	cp -f bzip2 $(PREFIX)/bin/bunzip2
	cp -f bzip2 $(PREFIX)/bin/bzcat
	cp -f bzip2recover $(PREFIX)/bin/bzip2recover
	chmod a+x $(PREFIX)/bin/bzip2
	chmod a+x $(PREFIX)/bin/bunzip2
	chmod a+x $(PREFIX)/bin/bzcat
	chmod a+x $(PREFIX)/bin/bzip2recover
	cp -f bzip2.1 $(PREFIX)/man/man1
	chmod a+r $(PREFIX)/man/man1/bzip2.1
	cp -f bzlib.h $(PREFIX)/include
	chmod a+r $(PREFIX)/include/bzlib.h
	cp -f libbz2.a $(PREFIX)/lib
	chmod a+r $(PREFIX)/lib/libbz2.a
	cp -f bzgrep $(PREFIX)/bin/bzgrep
	ln -s -f $(PREFIX)/bin/bzgrep $(PREFIX)/bin/bzegrep
	ln -s -f $(PREFIX)/bin/bzgrep $(PREFIX)/bin/bzfgrep
	chmod a+x $(PREFIX)/bin/bzgrep
	cp -f bzmore $(PREFIX)/bin/bzmore
	ln -s -f $(PREFIX)/bin/bzmore $(PREFIX)/bin/bzless
	chmod a+x $(PREFIX)/bin/bzmore
	cp -f bzdiff $(PREFIX)/bin/bzdiff
	ln -s -f $(PREFIX)/bin/bzdiff $(PREFIX)/bin/bzcmp
	chmod a+x $(PREFIX)/bin/bzdiff
	cp -f bzgrep.1 bzmore.1 bzdiff.1 $(PREFIX)/man/man1
	chmod a+r $(PREFIX)/man/man1/bzgrep.1
	chmod a+r $(PREFIX)/man/man1/bzmore.1
	chmod a+r $(PREFIX)/man/man1/bzdiff.1
	echo ".so man1/bzgrep.1" > $(PREFIX)/man/man1/bzegrep.1
	echo ".so man1/bzgrep.1" > $(PREFIX)/man/man1/bzfgrep.1
	echo ".so man1/bzmore.1" > $(PREFIX)/man/man1/bzless.1
	echo ".so man1/bzdiff.1" > $(PREFIX)/man/man1/bzcmp.1

clean: 
	rm -f *.o *.obj libbz2.a bzip2 bzip2recover bzip2-cilkstatic bzip2-dynamic \
	sample1.rb2 sample2.rb2 sample3.rb2 \
	sample1.tst sample2.tst sample3.tst \
	cilktest1.tst mk251 mkruns

blocksort$(OSUFFIX): $(srcdir)/blocksort.c
	@cat $(srcdir)/words0
	$(CC) $(CFLAGS) -c $(srcdir)/blocksort.c
huffman$(OSUFFIX): $(srcdir)/huffman.c
	$(CC) $(CFLAGS) -c $(srcdir)/huffman.c
crctable$(OSUFFIX): $(srcdir)/crctable.c
	$(CC) $(CFLAGS) -c $(srcdir)/crctable.c
randtable$(OSUFFIX): $(srcdir)/randtable.c
	$(CC) $(CFLAGS) -c $(srcdir)/randtable.c
compress$(OSUFFIX): $(srcdir)/compress.c
	$(CILKCILK) $(CFLAGS) -c $(srcdir)/compress.c
decompress$(OSUFFIX): $(srcdir)/decompress.c
	$(CC) $(CFLAGS) -c $(srcdir)/decompress.c
bzlib$(OSUFFIX): $(srcdir)/bzlib.c
	$(CC) $(CFLAGS) -c $(srcdir)/bzlib.c
bzip2$(OSUFFIX): $(srcdir)/bzip2.c
	$(CILKCILK) $(CFLAGS) -c $(srcdir)/bzip2.c
bzip2recover$(OSUFFIX): $(srcdir)/bzip2recover.c
	$(CC) $(CFLAGS) -c $(srcdir)/bzip2recover.c


DISTNAME=bzip2-1.0.5+cilk
distclean: clean
	rm -f manual.ps manual.html manual.pdf $(DISTNAME) $(DISTNAME).tar $(DISTNAME).tar.gz

dist: check manual
	rm -f $(DISTNAME) $(DISTNAME).tar $(DISTNAME).tar.gz
	ln -s -f . $(DISTNAME)
	tar cvf $(DISTNAME).tar \
	   $(DISTNAME)/blocksort.c \
	   $(DISTNAME)/huffman.c \
	   $(DISTNAME)/crctable.c \
	   $(DISTNAME)/randtable.c \
	   $(DISTNAME)/compress.c \
	   $(DISTNAME)/decompress.c \
	   $(DISTNAME)/bzlib.c \
	   $(DISTNAME)/bzip2.c \
	   $(DISTNAME)/bzip2recover.c \
	   $(DISTNAME)/bzlib.h \
	   $(DISTNAME)/bzlib_private.h \
	   $(DISTNAME)/Makefile \
	   $(DISTNAME)/LICENSE \
	   $(DISTNAME)/bzip2.1 \
	   $(DISTNAME)/bzip2.1.preformatted \
	   $(DISTNAME)/bzip2.txt \
	   $(DISTNAME)/words0 \
	   $(DISTNAME)/words1 \
	   $(DISTNAME)/words2 \
	   $(DISTNAME)/words3 \
	   $(DISTNAME)/sample1.ref \
	   $(DISTNAME)/sample2.ref \
	   $(DISTNAME)/sample3.ref \
	   $(DISTNAME)/sample1.bz2 \
	   $(DISTNAME)/sample2.bz2 \
	   $(DISTNAME)/sample3.bz2 \
	   $(DISTNAME)/cilktest1 \
	   $(DISTNAME)/dlltest.c \
	   $(DISTNAME)/manual.html \
	   $(DISTNAME)/manual.pdf \
	   $(DISTNAME)/manual.ps \
	   $(DISTNAME)/README \
	   $(DISTNAME)/README.COMPILATION.PROBLEMS \
	   $(DISTNAME)/README.XML.STUFF \
	   $(DISTNAME)/CHANGES \
	   $(DISTNAME)/libbz2.def \
	   $(DISTNAME)/libbz2.dsp \
	   $(DISTNAME)/dlltest.dsp \
	   $(DISTNAME)/makefile.msc \
	   $(DISTNAME)/unzcrash.c \
	   $(DISTNAME)/spewG.c \
	   $(DISTNAME)/mk251.c \
	   $(DISTNAME)/mkruns.c \
	   $(DISTNAME)/bzdiff \
	   $(DISTNAME)/bzdiff.1 \
	   $(DISTNAME)/bzmore \
	   $(DISTNAME)/bzmore.1 \
	   $(DISTNAME)/bzgrep \
	   $(DISTNAME)/bzgrep.1 \
	   $(DISTNAME)/Makefile-libbz2_so \
	   $(DISTNAME)/bz-common.xsl \
	   $(DISTNAME)/bz-fo.xsl \
	   $(DISTNAME)/bz-html.xsl \
	   $(DISTNAME)/bzip.css \
	   $(DISTNAME)/entities.xml \
	   $(DISTNAME)/manual.xml \
	   $(DISTNAME)/format.pl \
	   $(DISTNAME)/xmlproc.sh
	gzip -v $(DISTNAME).tar

# For rebuilding the manual from sources on my SuSE 9.1 box

MANUAL_SRCS= 	bz-common.xsl bz-fo.xsl bz-html.xsl bzip.css \
		entities.xml manual.xml 

manual: manual.html manual.ps manual.pdf

manual.ps: $(MANUAL_SRCS)
	./xmlproc.sh -ps manual.xml

manual.pdf: $(MANUAL_SRCS)
	./xmlproc.sh -pdf manual.xml

manual.html: $(MANUAL_SRCS)
	./xmlproc.sh -html manual.xml
